{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions1 = {\n  headers: new HttpHeaders({\n    \"Access-Control-Allow-Credentials\": \"true\",\n    \"Access-Control-Allow-Headers\": \"\"\n  })\n};\nexport let TweetServiceService = /*#__PURE__*/(() => {\n  class TweetServiceService {\n    constructor(http) {\n      this.http = http; //baseUrl = \"http://localhost:8080/api/v1.0/tweets\";\n\n      this.baseUrl = \"http://tweetapp-env.eba-zbs7kmmp.us-west-2.elasticbeanstalk.com/api/v1.0/tweets\";\n    } // httpOptions1: any;\n    // tokenVal =\n    //   localStorage.getItem(\"authorization\") == null\n    //     ? \"\"\n    //     : localStorage.getItem(\"authorization\");\n    // if(tokenVal: any) {\n    //   this.httpOptions1 = {\n    //     headers: new HttpHeaders({\n    //       \"Access-Control-Allow-Origin\": \"*\",\n    //       \"Access-Control-Allow-Credentials\": \"true\",\n    //       \"Access-Control-Allow-Headers\": \"\",\n    //       Authorization: tokenVal,\n    //     }),\n    //   };\n    // }\n\n\n    getTweetsByUserName(username) {\n      return this.http.get(this.baseUrl + `/${username}`).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    showMyTweets(loginId) {\n      return this.http.get(this.baseUrl + `/${loginId}`);\n    }\n\n    showMyTweetsById(tweetId) {\n      return this.http.get(this.baseUrl + `/byTweetId/${tweetId}`);\n    }\n\n    addComment(userName, tweetId, userComment) {\n      const comment = {\n        comment: userComment\n      };\n      const token = this.storeToken();\n      return this.http.post(this.baseUrl + `/${userName}/reply/${tweetId}`, comment, {\n        headers: {\n          Authorization: token\n        }\n      }).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    getAllTweets() {\n      return this.http.get(this.baseUrl + `/all`, httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    searchUserTweet(tweetId) {\n      return this.http.get(this.baseUrl + `/${tweetId}`, httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    createTweet(userName, tweet) {\n      const token = this.storeToken();\n      return this.http.post(this.baseUrl + `/${userName}/add`, tweet, {\n        headers: {\n          Authorization: token\n        }\n      }).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    getTweetLikesById(tweetId) {\n      return this.http.get(this.baseUrl + `/getLike/${tweetId}`);\n    }\n\n    getTweetCommentsById(tweetId) {\n      return this.http.post(this.baseUrl + `/${tweetId.username}/add`, tweetId, httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    addLike(userName, tweetId) {\n      const token = this.storeToken();\n      return this.http.put(this.baseUrl + `/${userName}/like/${tweetId}`, {\n        responseType: \"json\"\n      }, {\n        headers: {\n          Authorization: token\n        }\n      }).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    updateTweet(loginId, tweetId, value) {\n      const token = this.storeToken();\n      return this.http.put(this.baseUrl + `/${loginId}/update/${tweetId}`, value, {\n        headers: {\n          Authorization: token\n        }\n      });\n    }\n\n    deleteTweet(loginId, tweetId) {\n      const token = this.storeToken();\n      return this.http.delete(this.baseUrl + `/${loginId}/delete/${tweetId}`, {\n        headers: {\n          Authorization: token\n        }\n      });\n    }\n\n    storeToken() {\n      const token = localStorage.getItem(\"authorization\") == null ? \"\" : localStorage.getItem(\"authorization\");\n\n      if (token != null) {\n        return token;\n      } else {\n        return \"\";\n      }\n    }\n\n  }\n\n  TweetServiceService.ɵfac = function TweetServiceService_Factory(t) {\n    return new (t || TweetServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TweetServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TweetServiceService,\n    factory: TweetServiceService.ɵfac,\n    providedIn: \"root\"\n  });\n  return TweetServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}