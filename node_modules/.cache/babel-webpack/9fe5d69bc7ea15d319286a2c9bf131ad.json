{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions1 = {\n  headers: new HttpHeaders({\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Credentials\": \"true\",\n    \"Access-Control-Allow-Headers\": \"\"\n  })\n};\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(http) {\n      this.http = http; // baseUrl = \"http://localhost:8080/api/v1.0/tweets\";\n\n      this.baseUrl = \"http://tweetapp-env.eba-zbs7kmmp.us-west-2.elasticbeanstalk.com/api/v1.0/tweets\";\n    }\n\n    checkUserCredentials(loginCredentials) {\n      return this.http.post(this.baseUrl + \"/login\", loginCredentials, httpOptions1).pipe();\n    }\n\n    storeUserData(username, firstName, authorization) {\n      localStorage.setItem(\"loginId\", username);\n      localStorage.setItem(\"firstName\", firstName);\n      localStorage.setItem(\"authorization\", authorization);\n    }\n\n    isLoggedIn() {\n      if (localStorage.getItem(\"loginId\")) return this.loggedIn = true;\n      return this.loggedIn = false;\n    }\n\n    logout() {\n      localStorage.clear();\n      this.loggedIn = false;\n    }\n\n    register(userInfo) {\n      return this.http.post(this.baseUrl + \"/register\", userInfo, httpOptions1).pipe();\n    }\n\n    forgotPassword(userName, newPassword) {\n      const password = {\n        password: newPassword\n      };\n      return this.http.post(this.baseUrl + `/${userName}/forgot`, password, httpOptions1).pipe();\n    }\n\n    getUserByUserName(username) {\n      return this.http.get(this.baseUrl + `/user/search/${username}`);\n    }\n\n    getAllUsers() {\n      return this.http.get(this.baseUrl + `/users/all`, httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    getToken() {\n      return this.http.get(this.baseUrl + `/jwt/authentication`).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n  }\n\n  LoginService.ɵfac = function LoginService_Factory(t) {\n    return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginService,\n    factory: LoginService.ɵfac,\n    providedIn: \"root\"\n  });\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module"}