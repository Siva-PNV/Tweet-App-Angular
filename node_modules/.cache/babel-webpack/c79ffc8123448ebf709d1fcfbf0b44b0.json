{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TweetServiceService = /*#__PURE__*/(() => {\n  class TweetServiceService {\n    constructor(http) {\n      this.http = http;\n      this.tokenVal = localStorage.getItem('authorization') == null ? '' : localStorage.getItem('authorization');\n    }\n\n    if(tokenVal) {\n      this.httpOptions1 = {\n        headers: new HttpHeaders({\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Credentials': 'true',\n          'Access-Control-Allow-Headers': '',\n          Authorization: tokenVal\n        })\n      };\n    }\n\n    getTweetsByUserName(username) {\n      return this.http.get(`http://localhost:8080/api/v1.0/tweets/${username}`).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    showMyTweets(loginId) {\n      return this.http.get(`http://localhost:8080/api/v1.0/tweets/${loginId}`);\n    }\n\n    showMyTweetsById(tweetId) {\n      return this.http.get(`http://localhost:8080/api/v1.0/tweets/byTweetId/${tweetId}`);\n    }\n\n    addComment(userName, tweetId, userComment) {\n      const comment = {\n        comment: userComment\n      };\n      const token = this.storeToken();\n      return this.http.post(`http://localhost:8080/api/v1.0/tweets/${userName}/reply/${tweetId}`, comment, {\n        headers: {\n          Authorization: token\n        }\n      }).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    getAllTweets() {\n      return this.http.get(`http://localhost:8080/api/v1.0/tweets/all`, this.httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    searchUserTweet(tweetId) {\n      return this.http.get(`http://localhost:8080/api/v1.0/tweets/${tweetId}`, this.httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    createTweet(userName, tweet) {\n      const token = this.storeToken();\n      return this.http.post(`http://localhost:8080/api/v1.0/tweets/${userName}/add`, tweet, {\n        headers: {\n          Authorization: token\n        }\n      }).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    getTweetLikesById(tweetId) {\n      return this.http.get(`http://localhost:8080/api/v1.0/tweets/getLike/${tweetId}`);\n    }\n\n    getTweetCommentsById(tweetId) {\n      return this.http.post(`http://localhost:8080/api/v1.0/tweets/${tweetId.username}/add`, tweetId, this.httpOptions1).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    addLike(userName, tweetId) {\n      const token = this.storeToken();\n      return this.http.put(`http://localhost:8080/api/v1.0/tweets/${userName}/like/${tweetId}`, {\n        responseType: 'json'\n      }, {\n        headers: {\n          Authorization: token\n        }\n      }).pipe(map(data1 => data1 = JSON.parse(JSON.stringify(data1))));\n    }\n\n    updateTweet(loginId, tweetId, value) {\n      const token = this.storeToken();\n      return this.http.put(`http://localhost:8080/api/v1.0/tweets/${loginId}/update/${tweetId}`, value, {\n        headers: {\n          Authorization: token\n        }\n      });\n    }\n\n    deleteTweet(loginId, tweetId) {\n      const token = this.storeToken();\n      return this.http.delete(`http://localhost:8080/api/v1.0/tweets/${loginId}/delete/${tweetId}`, {\n        headers: {\n          Authorization: token\n        }\n      });\n    }\n\n    storeToken() {\n      const token = localStorage.getItem('authorization') == null ? '' : localStorage.getItem('authorization');\n\n      if (token != null) {\n        return token;\n      } else {\n        return '';\n      }\n    }\n\n  }\n\n  TweetServiceService.ɵfac = function TweetServiceService_Factory(t) {\n    return new (t || TweetServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TweetServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TweetServiceService,\n    factory: TweetServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return TweetServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}