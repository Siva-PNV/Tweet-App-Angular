{"ast":null,"code":"import _asyncToGenerator from \"/Users/sivapallem1/Documents/GitHub/TweetApplication/TweetApplication/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpClient, HttpHandler } from '@angular/common/http';\nimport { TestBed } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { UserDashboardComponent } from './user-dashboard.component';\ndescribe('UserDashboardComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [UserDashboardComponent],\n      imports: [RouterTestingModule],\n      providers: [HttpClient, FormBuilder, HttpHandler]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserDashboardComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should get welcome user name', () => {\n    const spy = spyOn(component, 'getWelcomeUserName');\n    component.getWelcomeUserName();\n    expect(spy).toHaveBeenCalled();\n  });\n  it('should get welcome user name', () => {\n    const spy = spyOn(component, 'getLastUpdatedTweet');\n    component.getLastUpdatedTweet();\n    expect(spy).toHaveBeenCalled();\n  });\n});","map":{"version":3,"sources":["/Users/sivapallem1/Documents/GitHub/TweetApplication/TweetApplication/src/app/user-dashboard/user-dashboard.component.spec.ts"],"names":["HttpClient","HttpHandler","TestBed","FormBuilder","RouterTestingModule","UserDashboardComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","providers","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","spy","spyOn","getWelcomeUserName","toHaveBeenCalled","getLastUpdatedTweet"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAyC,sBAAzC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACAC,QAAQ,CAAC,wBAAD,EAA2B,MAAM;AACrC,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMP,OAAO,CAACQ,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACN,sBAAD,CADmB;AAEjCO,MAAAA,OAAO,EAAE,CAACR,mBAAD,CAFwB;AAGjCS,MAAAA,SAAS,EAAE,CAACb,UAAD,EAAaG,WAAb,EAA0BF,WAA1B;AAHsB,KAA/B,EAIHa,iBAJG,EAAN;AAKH,GANS,EAAV;AAOAL,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGN,OAAO,CAACa,eAAR,CAAwBV,sBAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACQ,iBAApB;AACAR,IAAAA,OAAO,CAACS,aAAR;AACH,GAJS,CAAV;AAKAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAACZ,SAAD,CAAN,CAAkBa,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACrC,UAAMG,GAAG,GAAGC,KAAK,CAACf,SAAD,EAAY,oBAAZ,CAAjB;AACAA,IAAAA,SAAS,CAACgB,kBAAV;AACAJ,IAAAA,MAAM,CAACE,GAAD,CAAN,CAAYG,gBAAZ;AACH,GAJC,CAAF;AAKAN,EAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACrC,UAAMG,GAAG,GAAGC,KAAK,CAACf,SAAD,EAAY,qBAAZ,CAAjB;AACAA,IAAAA,SAAS,CAACkB,mBAAV;AACAN,IAAAA,MAAM,CAACE,GAAD,CAAN,CAAYG,gBAAZ;AACH,GAJC,CAAF;AAKH,CA5BO,CAAR","sourcesContent":["import { HttpClient, HttpHandler, } from '@angular/common/http';\nimport { TestBed } from '@angular/core/testing';\nimport { FormBuilder } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { UserDashboardComponent } from './user-dashboard.component';\ndescribe('UserDashboardComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [UserDashboardComponent],\n            imports: [RouterTestingModule],\n            providers: [HttpClient, FormBuilder, HttpHandler],\n        }).compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(UserDashboardComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('should create', () => {\n        expect(component).toBeTruthy();\n    });\n    it('should get welcome user name', () => {\n        const spy = spyOn(component, 'getWelcomeUserName');\n        component.getWelcomeUserName();\n        expect(spy).toHaveBeenCalled();\n    });\n    it('should get welcome user name', () => {\n        const spy = spyOn(component, 'getLastUpdatedTweet');\n        component.getLastUpdatedTweet();\n        expect(spy).toHaveBeenCalled();\n    });\n});\n"]},"metadata":{},"sourceType":"module"}